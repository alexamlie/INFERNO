"""
filter_gtex_rnaseq_genes.py

Alex Amlie-Wolf 06/16/16
A script that takes in GTEx gene expression data and a list of genes and pulls out the expression
of the genes in the list
"""

import argparse, gzip, sys

def filter_gtex_genes(gtex_data, gene_list):
    ## first read in the gene list
    gene_ids = []
    with open(gene_list, 'rb') as input_genes:
        ## get the header
        gene_header = next(input_genes).strip().split("\t")
        gene_idx = {gene_header[x]:x for x in range(len(gene_header))}
        ## now read in the genes
        for line in input_genes:
            this_data = line.strip().split("\t")
            gene_ids.append(this_data[gene_idx['gene_id']])

    ## now we can go through the GTEx file and check for matches
    with gzip.open(gtex_data, 'r') as gtex_expression:
        ## skip the first two lines
        next(gtex_expression)
        next(gtex_expression)
        ## now print out the header
        sys.stdout.write(next(gtex_expression))

        for line in gtex_expression:
            ## just get the gene name without having to split everything else
            gtex_gene = line.strip().split("\t", 1)[0]
            ## check if this matches up with any of our genes. the gene IDs from the ensembl
            ## reference file don't contain the isoform numbers, so we have to check this
            for gene in gene_ids:
                if gtex_gene.startswith(gene):
                    sys.stdout.write(line)
                    gene_ids.remove(gene)
                    break
            if len(gene_ids)==0:
                break

if __name__=="__main__":
    parser = argparse.ArgumentParser(description="Get GTEx expression levels")
    parser.add_argument("gtex_data", help="The gzipped file containing the gene expression values for GTEx genes across samples")
    parser.add_argument("gene_list", help="The list of genes to be analyzed. This uses Ensembl IDs, and the gene ID (ENSG*) is used to match against GTEx. This file should be generated by the find_neighboring_ensembl_genes.sh script")

    pargs = parser.parse_args()

    filter_gtex_genes(pargs.gtex_data, pargs.gene_list)
